{"version":3,"sources":["SetupSecret.jsx","RevealSecret.jsx","App.js","reportWebVitals.js","index.js"],"names":["customFees","upload","amount","denom","gas","init","exec","send","useState","client","setClient","signingPen","setSigningPen","address","setAddress","account","setAccount","inProgress","setInProgress","message","setMessage","linkToReveal","setLinkToReveal","accountNumber","balance","sequence","useEffect","a","Secp256k1Pen","fromMnemonic","pen","pubkey","encodeSecp256k1Pubkey","accAddress","pubkeyToAddress","txEncryptionSeed","EnigmaUtils","GenerateNewSeed","SigningCosmWasmClient","signBytes","sign","retrieveAccount","fn","getAccount","then","console","log","catch","err","error","assert","handleCreateToken","execute","public_metadata","name","description","response","result","JSON","parse","String","fromCharCode","data","tokenId","mint_nft","token_id","ready","Form","FormGroup","controlId","FormLabel","FormControl","disabled","value","as","to","onChange","target","Button","className","onClick","icon","faSpinner","spin","useParams","revealed","setRevealed","handleBurnToReveal","burn_nft","secret","App","path","exact","SetupSecret","RevealSecret","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5120653.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {encodeSecp256k1Pubkey, EnigmaUtils, pubkeyToAddress, Secp256k1Pen, SigningCosmWasmClient} from \"secretjs\";\nimport {Button, Form, FormControl, FormGroup, FormLabel} from \"react-bootstrap\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faSpinner} from \"@fortawesome/free-solid-svg-icons\";\nimport {Link} from \"react-router-dom\";\n\nconst WALLET_WORDS = 'scrap network kiss canoe bird strategy fence anger way budget globe evidence will vibrant parade dream slogan around smart daughter buyer guess measure taste'\nconst CONTRACT_ADDRESS = 'secret19vc03hfsuqfsmt73c4fypg5au07lfngpcw2ytc'\nconst SECRET_REST_URL = 'https://bootstrap.secrettestnet.io/'\n\nconst customFees = {\n    upload: {\n        amount: [{amount: \"2000000\", denom: \"uscrt\"}],\n        gas: \"2000000\",\n    },\n    init: {\n        amount: [{amount: \"500000\", denom: \"uscrt\"}],\n        gas: \"500000\",\n    },\n    exec: {\n        amount: [{amount: \"500000\", denom: \"uscrt\"}],\n        gas: \"500000\",\n    },\n    send: {\n        amount: [{amount: \"80000\", denom: \"uscrt\"}],\n        gas: \"80000\",\n    },\n}\n\nexport default () => {\n    const [client, setClient] = useState()\n    const [signingPen, setSigningPen] = useState()\n    const [address, setAddress] = useState('')\n    const [account, setAccount] = useState({})\n    const [inProgress, setInProgress] = useState(false)\n    const [message, setMessage] = useState('')\n\n    const [linkToReveal, setLinkToReveal] = useState('')\n\n    const {accountNumber, balance, sequence} = account || {\n        accountNumber: '',\n        balance: 0,\n        sequence: 0\n    }\n\n    useEffect(() => {\n        (async () => {\n            const pen = await Secp256k1Pen.fromMnemonic(WALLET_WORDS);\n            setSigningPen(pen)\n        })()\n    }, [])\n\n    useEffect(() => {\n        if (signingPen) {\n            const pubkey = encodeSecp256k1Pubkey(signingPen.pubkey)\n            const accAddress = pubkeyToAddress(pubkey, 'secret')\n            setAddress(accAddress)\n        }\n    }, [signingPen])\n\n    useEffect(() => {\n        if (signingPen && address) {\n            const txEncryptionSeed = EnigmaUtils.GenerateNewSeed()\n            const client = new SigningCosmWasmClient(\n                SECRET_REST_URL,\n                address,\n                (signBytes) => signingPen.sign(signBytes),\n                txEncryptionSeed, customFees\n            )\n            setClient(client)\n        }\n    }, [signingPen, address])\n\n    useEffect(() => {\n        if (client) {\n            retrieveAccount()\n        }\n    }, [client])\n\n    const retrieveAccount = async () => {\n        let account;\n        while (!account) {\n            account = await client.getAccount(address)\n                .then(a => {\n                    console.log(a)\n                    return a\n                })\n                .catch(err => console.error(\"request failed, re-try\"))\n        }\n        console.assert(account.address === address)\n        setAccount(account)\n    }\n\n    const handleCreateToken = async () => {\n        console.log('Creating a token')\n        setInProgress(true)\n\n        let response = await client.execute(CONTRACT_ADDRESS, {\n            \"mint_nft\": {\n                public_metadata: {\n                    name: \"Secret Sauce\",\n                    description: message\n                }\n            }\n        });\n        console.log(response)\n        let result = JSON.parse(String.fromCharCode(...response.data))\n\n        console.log(result)\n\n        let tokenId = result?.mint_nft?.token_id\n\n        setLinkToReveal(`/${tokenId}`)\n\n        setMessage('')\n        setInProgress(false)\n    }\n\n    const ready = signingPen && address && sequence && !inProgress\n\n    const onChangeEvent = fn => ({target: {value}}) => fn(value)\n\n    return (\n        <section>\n            <Form>\n                <FormGroup controlId='address'>\n                    <FormLabel>Address</FormLabel>\n                    <FormControl disabled={true} value={address}/>\n                </FormGroup>\n                <FormGroup controlId='accountNumber'>\n                    <FormLabel>Account number</FormLabel>\n                    <FormControl disabled={true} value={accountNumber}/>\n                </FormGroup>\n                {linkToReveal ?\n                    <>\n                        <FormGroup controlId='tokenId'>\n                            <Link as='Button' to={linkToReveal}>Reveal the secret</Link>\n                        </FormGroup>\n                    </>\n                    :\n                    <>\n                        <FormGroup controlId='message'>\n                            <FormLabel>Message</FormLabel>\n                            <FormControl value={message} onChange={onChangeEvent(setMessage)}/>\n                        </FormGroup>\n                        <FormGroup controlId='createTokenButton'>\n                            <Button className='create-token-button' disabled={!ready} onClick={handleCreateToken}>\n                                {inProgress ? <FontAwesomeIcon icon={faSpinner} spin/> : \"Create SHHH! token\"}\n                            </Button>\n                        </FormGroup>\n                    </>\n                }\n            </Form>\n        </section>\n    );\n\n}","import React, {useEffect, useState} from \"react\";\nimport {encodeSecp256k1Pubkey, EnigmaUtils, pubkeyToAddress, Secp256k1Pen, SigningCosmWasmClient} from \"secretjs\";\nimport {Button, Form, FormControl, FormGroup, FormLabel} from \"react-bootstrap\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faSpinner} from \"@fortawesome/free-solid-svg-icons\";\nimport {Link, useParams} from 'react-router-dom'\n\nconst WALLET_WORDS = 'scrap network kiss canoe bird strategy fence anger way budget globe evidence will vibrant parade dream slogan around smart daughter buyer guess measure taste'\nconst CONTRACT_ADDRESS = 'secret19vc03hfsuqfsmt73c4fypg5au07lfngpcw2ytc'\nconst SECRET_REST_URL = 'https://bootstrap.secrettestnet.io/'\n\nconst customFees = {\n    upload: {\n        amount: [{amount: \"2000000\", denom: \"uscrt\"}],\n        gas: \"2000000\",\n    },\n    init: {\n        amount: [{amount: \"500000\", denom: \"uscrt\"}],\n        gas: \"500000\",\n    },\n    exec: {\n        amount: [{amount: \"500000\", denom: \"uscrt\"}],\n        gas: \"500000\",\n    },\n    send: {\n        amount: [{amount: \"80000\", denom: \"uscrt\"}],\n        gas: \"80000\",\n    },\n}\n\nexport default () => {\n    let {tokenId} = useParams();\n    console.log(tokenId)\n    const [client, setClient] = useState()\n    const [signingPen, setSigningPen] = useState()\n    const [address, setAddress] = useState('')\n    const [account, setAccount] = useState({})\n    const [inProgress, setInProgress] = useState(false)\n    const [revealed, setRevealed] = useState('')\n\n    const {accountNumber, balance, sequence} = account || {\n        accountNumber: '',\n        balance: 0,\n        sequence: 0\n    }\n\n    useEffect(() => {\n        (async () => {\n            const pen = await Secp256k1Pen.fromMnemonic(WALLET_WORDS);\n            setSigningPen(pen)\n        })()\n    }, [])\n\n    useEffect(() => {\n        if (signingPen) {\n            const pubkey = encodeSecp256k1Pubkey(signingPen.pubkey)\n            const accAddress = pubkeyToAddress(pubkey, 'secret')\n            setAddress(accAddress)\n        }\n    }, [signingPen])\n\n    useEffect(() => {\n        if (signingPen && address) {\n            const txEncryptionSeed = EnigmaUtils.GenerateNewSeed()\n            const client = new SigningCosmWasmClient(\n                SECRET_REST_URL,\n                address,\n                (signBytes) => signingPen.sign(signBytes),\n                txEncryptionSeed, customFees\n            )\n            setClient(client)\n        }\n    }, [signingPen, address])\n\n    useEffect(() => {\n        if (client) {\n            retrieveAccount()\n        }\n    }, [client])\n\n    const retrieveAccount = async () => {\n        let account;\n        while (!account) {\n            account = await client.getAccount(address)\n                .then(a => {\n                    console.log(a)\n                    return a\n                })\n                .catch(err => console.error(\"request failed, re-try\"))\n        }\n        console.assert(account.address === address)\n        setAccount(account)\n    }\n\n    const handleBurnToReveal = async () => {\n        console.log('Revealing secret message')\n        setInProgress(true)\n\n        let response = await client.execute(CONTRACT_ADDRESS, {\n            \"burn_nft\": {\n                token_id: tokenId\n            }\n        });\n        console.log(response)\n        let result = JSON.parse(String.fromCharCode(...response.data))\n\n        console.log(result)\n\n        setRevealed(result?.burn_nft?.secret?.description)\n        setInProgress(false)\n    }\n    const ready = signingPen && address && sequence && !inProgress\n\n    return (\n        <section>\n            <Form>\n                <FormGroup controlId='address'>\n                    <FormLabel>Address</FormLabel>\n                    <FormControl disabled={true} value={address}/>\n                </FormGroup>\n                {tokenId && !revealed &&\n                <>\n                    <FormGroup controlId='token_id'>\n                        <FormLabel>Token Id</FormLabel>\n                        <FormControl disabled={true} value={tokenId}/>\n                    </FormGroup>\n                    <FormGroup controlId='burnToRevealButton'>\n                        <Button className='burn-to-reveal-button' disabled={!ready} onClick={handleBurnToReveal}>\n                            {inProgress ? <FontAwesomeIcon icon={faSpinner} spin/> : \"Burn to reveal\"}\n                        </Button>\n                    </FormGroup>\n                </>\n                }\n                {revealed &&\n                <>\n                    <FormGroup controlId='revealedMessage'>\n                        <FormLabel>Revealed Message</FormLabel>\n                        <FormControl value={revealed} disabled={true}/>\n                    </FormGroup>\n                    <Link as=\"Button\" to=\"/\">Send another secret</Link>\n                </>\n                }\n            </Form>\n        </section>\n    );\n\n}","import './App.scss';\nimport React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport SetupSecret from \"./SetupSecret\";\nimport RevealSecret from \"./RevealSecret\";\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    A simple app for the secret network\n                </header>\n                <Switch>\n                    <Route path='/' exact>\n                        <SetupSecret/>\n                    </Route>\n                    <Route path='/:tokenId' exact>\n                        <RevealSecret/>\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}